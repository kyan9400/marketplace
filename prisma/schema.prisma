// This is your Prisma schema file
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ---- Marketplace Models ----

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shops     Shop[]
  orders    Order[]
  addresses Address[]
  reviews   Review[]
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
}

model Shop {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?
  bannerUrl   String?
  isApproved  Boolean  @default(false)
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner    User     @relation(fields: [ownerId], references: [id])
  products Product[]
  orders   Order[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
}

model Product {
  id            String          @id @default(cuid())
  shopId        String
  title         String
  slug          String          @unique
  description   String?
  priceCents    Int
  currency      String
  imagesJson    String?         // store array as JSON string
  status        ProductStatus   @default(DRAFT)
  ratingAvg     Float           @default(0)
  ratingCount   Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoryId    String?

  shop         Shop      @relation(fields: [shopId], references: [id])
  category     Category? @relation(fields: [categoryId], references: [id])
  variants     ProductVariant[]
  reviews      Review[]
  orderItems   OrderItem[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  sku         String  @unique
  name        String?
  priceDelta  Int     @default(0)
  stockQty    Int     @default(0)
  barcode     String?

  product     Product @relation(fields: [productId], references: [id])
  orderItems  OrderItem[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  label      String?
  fullName   String
  phone      String?
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String?
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  ordersShipping Order[] @relation("ShippingAddress")
  ordersBilling  Order[] @relation("BillingAddress")
}

model Order {
  id             String        @id @default(cuid())
  userId         String
  shopId         String?
  shippingId     String?
  billingId      String?
  status         OrderStatus   @default(PENDING)
  paymentStatus  PaymentStatus @default(UNPAID)
  currency       String
  subtotalCents  Int           @default(0)
  discountCents  Int           @default(0)
  shippingCents  Int           @default(0)
  taxCents       Int           @default(0)
  totalCents     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  shop        Shop?    @relation(fields: [shopId], references: [id])
  shipping    Address? @relation("ShippingAddress", fields: [shippingId], references: [id])
  billing     Address? @relation("BillingAddress", fields: [billingId], references: [id])
  items       OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PARTIAL_REFUND
}

model OrderItem {
  id             String  @id @default(cuid())
  orderId        String
  productId      String
  variantId      String?
  titleSnapshot  String
  skuSnapshot    String?
  unitPriceCents Int
  qty            Int
  totalCents     Int

  order    Order          @relation(fields: [orderId], references: [id])
  product  Product        @relation(fields: [productId], references: [id])
  variant  ProductVariant? @relation(fields: [variantId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  comment    String?
  photosJson String?   // store array as JSON string
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}
